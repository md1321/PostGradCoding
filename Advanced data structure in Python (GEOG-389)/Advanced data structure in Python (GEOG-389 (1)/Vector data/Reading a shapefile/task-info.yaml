type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 46
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 46
    initialized_from_dependency: false
    possible_answer: import
    selected: false
    status: Unchecked
  - offset: 66
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 66
    initialized_from_dependency: false
    possible_answer: as
    selected: false
    status: Unchecked
  - offset: 180
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 180
    initialized_from_dependency: false
    possible_answer: '"C:/Users/yi/Documents/UH_work/Teaching/GEOG389/labs/lab2_data/crime.shp"'
    selected: false
    status: Unchecked
  - offset: 217
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 217
    initialized_from_dependency: false
    possible_answer: type(data)
    selected: false
    status: Unchecked
  - offset: 261
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 261
    initialized_from_dependency: false
    possible_answer: data.head()
    selected: false
    status: Unchecked
  text: |+
    # Load the geopandas package, and name it gdp
    type here geopandas type here gdp

    # Read the shapefile crime.shp into data.
    # Change the file path accordingly.
    data = gdp.read_file(type here)

    # Print the type of data
    type here

    # Print the first 5 rows of data
    type here

    # plot the geometries (point) of the data
    data.plot()

    # Plot the data again with different symbols and colors
    data.plot(marker='*', color='green', markersize=0.5)


  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import run_common_tests, failed, passed, get_answer_placeholders


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0]
        if placeholder == "":       # TODO: your condition here
            passed()
        else:
            failed()


    if __name__ == '__main__':
        run_common_tests()
        # test_answer_placeholders()       # TODO: uncomment test call


  learner_created: false
status: Unchecked
record: -1
